# 自定义 Quantumult-X 配置示例

# 以 ";" 或 "#" 或 "//" 开头的行为注释行。
# SS-URI scheme can be found at https://shadowsocks.org/en/spec/SIP002-URI-Scheme.html


[general]
# 建议在「其他设置」里「GeoLite2」的「来源」填写使用「 https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country.mmdb 」并开启「自动更新」

;profile_img_url =http://www.example.com/example.png

# 资源解析器
;resource_parser_url=https://raw.githubusercontent.com/crossutility/Quantumult-X/master/resource-parser.js
resource_parser_url=https://cdn.jsdelivr.net/gh/KOP-XIAO/QuantumultX@master/Scripts/resource-parser.js

;network_check_url =http://bing.com

# Quantumult 使用 HEAD 方法将 HTTP 请求发送到服务器检查 url 来测试代理的状态，结果应该是两个延迟，第一个是 TCP 与代理服务器的握手，第二个是 Quantumult 成功地从服务器检查 url 接收 HTTP 响应的总时间。闪电图标表示 TCP Fast Open 成功。如果 [server_local] 或 [server_remote] 中的服务器有自己的 server_check_url，则会用自己的 server_check_url 代替 [general] 中的 server_check_url。
# Quantumult 使用 HTTP HEAD 方法对测试网址 server_check_url 进行网页响应性测试(测试结果为通过该节点访问此网页获得 HTTP 响应所需要的时间)，来确认节点的可用性。
# Quantumult 界面中的延迟测试方式均为网页响应性测试，显示的最终延迟均为通过对应节点访问测试网页获得 HTTP 响应所需要时间。
# 由于 Trojan 协议为无响应校验协议，使得 HTTP 检测方式即使获得了 HTTP 响应，也不代表节点一定可用。
;server_check_url =http://www.google.com/generate_204
server_check_url=http://cp.cloudflare.com/generate_204

;server_check_user_agent = Agent/1.0

# 只有小于或等于 5000（毫秒）时才会考虑 server_check_timeout 值。该值与包括 DNS 查询、TCP 握手、TLS 握手和应用层 HTTP 会话持续时间在内的检查过程的总持续时间进行比较，因此总持续时间可能明显长于“TCP 握手”和“HTTP 会话持续时间” .
;server_check_timeout = 5000

;doh_user_agent = Agent/1.0

;geo_location_checker = http://www.example.com/json/, https://www.example.com/script.js
geo_location_checker=http://ip-api.com/json/?lang=zh-CN, https://cdn.jsdelivr.net/gh/KOP-XIAO/QuantumultX@master/Scripts/IP_API.js

# 在网络环境切换时出发运行模式变更
# filter - 规则分流，all_proxy - 全部代理，all_direct - 全部直连
# 示例意思：[蜂窝数据],[Wi-Fi],[SSID]
# 下列示例的意思为：在蜂窝数据使用规则分流(第一个 filter)，在 Wi-Fi 使用规则分流(第二个 filter)，在 SSID 为 LINK_22E171 的 Wi-Fi 使用全部代理，，在 SSID 为 LINK_22E172 的 Wi-Fi 使用全部直连
# Rewrite 及 Task 模块始终生效
;running_mode_trigger = filter, filter, LINK_22E171:all_proxy, LINK_22E172:all_direct
running_mode_trigger=filter, filter, LY-Dormitory:all_direct, LY-Office:filter, 柳杨的iPhone:all_direct

# dns_exclusion_list 包含了禁用占位符 IP(198.18.0.0/15) 的域。不在 dns_exclusion_list 中的域启用了占位符 IP 映射机制，并打开了 resolve-on-remote 设置。 dns_exclusion_list 中域的 DNS 查询可能会也可能不会遵循 [dns] 部分中的设置。
dns_exclusion_list = *.cmpassport.com, *.jegotrip.com.cn, *.icitymobile.mobi, id6.me

# 默认情况下（“loopback”），当域在 DNS 级别拒绝时，将返回环回 IP 响应，您可以通过将 dns_reject_domain_behavior 设置为 no-error-no-answer 或 nxdomain 来更改此行为。这会将行为更改为响应 NOERROR NOANSWER 响应或响应 NXDOMAIN 响应。如果您将拒绝的域更改为非拒绝（通过更改配置、过滤器或策略），最多可能需要 10 秒才能生效（TTL 10）。
;dns_reject_domain_behavior = loopback

# 在特定 SSID 网络时(除了 Task 模块)暂停 Quantumult X
;ssid_suspended_list = LY-Dormitory, LY-Office

# 参数 udp_whitelist 从 IP 层控制 UDP 数据是否需要舍弃；如舍弃，则该 UDP 请求不会进入规则模块以及策略模块，TCP/UDP 请求记录中也不会有相应的条目，但仍可在日志中查询到相关信息（日志等级 debug）。
# 该参数控制的是流入 Quantumult X Tunnel 的请求，并非 Quantumult X Tunnel 发出的请求，即不会作用于节点所使用的 UDP 目标端口。
;udp_whitelist = 53, 123, 1900, 80-443

# udp_drop_list 包含目的 UDP 端口，机制类似于 udp_whitelist 丢弃 UDP 数据包，但不会发回 ICMP 消息。只有 udp_whitelist 允许的 UDP 数据包才能被 udp_drop_list 捕获。
;udp_drop_list = 1900, 80

# Quantumult 将不会处理到 excluded_routes 的流量。修改后最好重新启动您的设备。
;excluded_routes = 192.168.0.0/16, 172.16.0.0/12, 100.64.0.0/10, 10.0.0.0/8

;icmp_auto_reply = true


[dns]
# 查询结果只用于评估过滤器或通过直接策略连接，当通过服务器连接时，查询结果不会被使用，Quantumult 永远不会知道相关域名的目标 IP。
# 如果您想让某个域名(例如：example.com)为 127.0.0.0.1，只需在「filter_local」部分添加「host, example.com, reject」即可。拒绝操作将返回 127.0.0.0.1 的 DNS 响应。

# 当设置 prefer-doh3 时，DoH 查询将尝试 DNS over HTTP3，如果失败则查询连接将回退到 HTTP2。由于 HTTP/2 和 HTTP/3 连接支持多路复用，因此当您更改此设置时，可能不会立即生效，但您可以重新连接 Quantumult X Tunnel 或手动更改网络环境使其立即生效。
prefer-doh3

# 为了提高性能，会使用从当前网络（系统）中获取的 DNS 服务器（您可以使用 no-system 禁用此功能，但至少要增加一个自定义的 DNS 服务器如：server=223.5.5.5）。
no-system

# 当设置 no-ipv6 时，Quantumult X Tunnel 的 DNS 模块会直接让 AAAA 查询失败，但仍然允许来自 IPv6 DNS 服务器的 A 查询。
;no-ipv6

# 自定义 DNS
;server = 8.8.8.8
;server = 8.8.8.8:53, excluded_ssids=SSID1
;server = 8.8.4.4:53, included_ssids=SSID2
;server = /example0.com/system
;server = /example1.com/8.8.4.4
;server = /*.example2.com/223.5.5.5
;server = /example4.com/[2001:4860:4860::8888]:53
server = 119.29.29.29
server = [2402:4e00::]
server = 223.5.5.5
server = [2400:3200::1]

# 当 DoH 服务器被设置时，所有其他普通的（没有与之相关的特定域）服务器将被忽略。
# 多个（并发查询）DoH 服务器应该配置在一行中，并且 URL 应该用逗号分隔。如果 iOS 版本 < iOS 13.0，DoH 的最大数量将被限制为 1。如果 iOS 版本 < iOS 15.0，DoH 的最大数量将被限制为 2。
# 当使用的 DoH 服务器不是基于 HTTP/2 时，DoH 将被暂时禁用，并使用常规服务器，直到下次启动 VPN 连接。
;doh-server = https://dns.alidns.com/dns-query
;doh-server = https://exmaple1.com/dns-query, https://exmaple2.com/dns-query
;doh-server = https://223.6.6.6/dns-query, excluded_ssids=SSID1
;doh-server = https://223.5.5.5/dns-query, included_ssids=SSID2
;doh-server = /*.example3.com/https://doh.pub/dns-query, excluded_ssids=SSID2
doh-server = https://doh.pub/dns-query, https://dns.alidns.com/dns-query

# 当 DoQ 服务器被设置时，所有 DoH 服务器和其他普通的（没有与之相关的特定域）服务器将被忽略。
# 多个（并发查询）DoQ 服务器应该配置在一行中，并且 URL 应该用逗号分隔。
# DoQ 的默认端口是 853，如果双方同意使用另一个端口，例如 456，您可以将其设置为 quic://dns.example.com:456
;doq-server = quic://dns.adguard.com
;doq-server = quic://dns1.example.com, quic://dns2.example.com
;doq-server = quic://dns.adguard.com, excluded_ssids=SSID1
;doq-server = quic://dns.adguard.com, included_ssids=SSID2
;doq-server = /*.example4.com/quic://dns.adguard.com, excluded_ssids=SSID3

;address = /example5.com/192.168.16.18
;address = /example6.com/[2001:8d3:8d3:8d3:8d3:8d3:8d3:8d3]

;alias = /example7.com/another-example.com


[policy]
# resource-tag-regex 及 server-tag-regex 仅适用于 static、available 和 round-robin 类型的策略。

# 静态(static)策略 指向您手动选择的候选服务器。
;static = policy-name-1, Sample-A, Sample-B, Sample-C, img-url=http://example.com/icon.png
;static = policy-name-5, resource-tag-regex=^sample, server-tag-regex=^example, img-url=http://example.com/icon.png
;static=Apple, direct, proxy, img-url=https://cdn.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Apple.png
;static=GoogleCN, direct, proxy, img-url=https://cdn.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Google.png
;static=Global, proxy, direct, img-url=https://cdn.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Global.png
;static=GFW, proxy, direct, img-url=https://cdn.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Global.png

# 可用(available)策略 指向候选服务器的第一个可用服务器（当策略被触发且策略结果不可用时，将立即启动并发 url 延迟测试。如果当时没有网络请求接受策略，这意味着策略处于空闲状态，即使服务器关闭，测试也不会启动。那时，您可以通过手动启动测试来更新服务器状态，但是这没有任何意义）。
;available = policy-name-2, Sample-A, Sample-B, Sample-C
;available = policy-name-6, resource-tag-regex=^sample, server-tag-regex=^example

# 负载均衡(round-robin)策略 指向在候选服务器中指向下一个服务器以进行下一次连接。
;round-robin = policy-name-3, Sample-A, Sample-B, Sample-C
;round-robin = policy-name-7, resource-tag-regex=^sample, server-tag-regex=^example

# SSID 策略 根据网络环境的不同指向服务器。
;ssid = policy-name-4, Sample-A, Sample-B, LINK_22E171:Sample-B, LINK_22E172:Sample-C

# dest-hash 策略 根据使用目标地址（域或 IP）作为输入的哈希函数指向服务器。此策略对于需要会话持久性的用例特别有用。从策略中添加或删除服务器可能会改变结果。
;dest-hash = policy-name-8, resource-tag-regex=^sample, server-tag-regex=^example
dest-hash = 🇺🇳Proxy, AkkoCloud, CloudCone

# 延迟测试(url-latency-benchmark)策略 指向具有最佳 URL 延迟(公差，单位毫秒)结果的服务器。当用户在 Quantumult X 中手动启动 URL 测试时，策略结果也会被更新。该类型的策略有一个名为 check-interval(秒) 的参数，如果此策略已经被任何请求激活，则将考虑该间隔。如果活动检查为真，则即使策略处于空闲状态，仍将考虑间隔并启动基准测试。
;url-latency-benchmark = policy-name-9, resource-tag-regex=^sample, server-tag-regex=^example, check-interval=600, alive-checking=false, tolerance=0


[server_remote]
# 参数「tag」和「enabled」是可选的。
# 各种远程资源的默认同步时间间隔是 86400 秒。
# 你可以设置 update-interval=172800 来自定义你的自动同步时间间隔(秒)，负数表示禁用自动同步。
# 如果设置了 require-devices，则仅当当前 Quantumult 设备 ID 属于 require-devices 时才会加载此行配置。 Quantumult 设备 ID 可在“设置 -其他设置 -关于”中找到。

;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/server.snippet, tag=Sample-01
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/server.snippet, opt-parser=true, tag=Sample-01
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/server.snippet, update-interval=-1, tag=Sample-01
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/server-complete.snippet, tag=Sample-02, as-policy=static, img-url=http://example.com/icon.png, enabled=false
;https://example.com/server.snippet, tag=Sample-03, img-url=http://example.com/icon.png, require-devices=ID1, ID2, enabled=false
servers.snippet, tag=VPS, update-interval=86400, opt-parser=false, enabled=true, img-url=https://cdn.jsdelivr.net/gh/Koolson/Qure@master/IconSet/United_States.png


[filter_remote]
# 参数「tag」、「force-policy」和「enabled」是可选的。
# 当有强制策略时，远程资源的过滤器中的策略将被忽略，并使用强制策略。

;FILTER_LAN, tag=LAN, force-policy=direct, enabled=true
;FILTER_REGION, tag=CN, force-policy=direct, enabled=true
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/filter.snippet, tag=Sample, force-policy=your-policy-name, enabled=true
;https://example.com/filter.snippet, tag=Sample, force-policy=your-policy-name, require-devices=ID1, ID2, enabled=true

# 自定义直连列表
https://cdn.jsdelivr.net/gh/SilentBreeze/Profiles@main/QuantumultX/Direct/domain.snippet, tag=✅CustomDirect, force-policy=direct, update-interval=172800, opt-parser=true, enabled=true

# 私有网络专用域名列表
https://cdn.jsdelivr.net/gh/Loyalsoldier/surge-rules@release/ruleset/private.txt, tag=🔂Private, force-policy=direct, update-interval=172800, opt-parser=true, enabled=true

# 广告域名列表1
https://cdn.jsdelivr.net/gh/Loyalsoldier/surge-rules@release/ruleset/reject.txt, tag=🛡Advertising1, force-policy=reject, update-interval=172800, opt-parser=true, enabled=true

# 广告域名列表2
https://cdn.jsdelivr.net/gh/privacy-protection-tools/anti-AD@master/anti-ad-surge2.txt, tag=🛡Advertising2, force-policy=reject, update-interval=172800, opt-parser=true, enabled=true

# iCloud 域名列表
https://cdn.jsdelivr.net/gh/Loyalsoldier/surge-rules@release/ruleset/icloud.txt, tag=☁️iCloud, force-policy=direct, update-interval=172800, opt-parser=true, enabled=true

# Apple 在中国大陆可直连的域名列表
https://cdn.jsdelivr.net/gh/Loyalsoldier/surge-rules@release/ruleset/apple.txt, tag=Apple, force-policy=direct, update-interval=172800, opt-parser=true, enabled=true

# Google 在中国大陆可直连的域名列表 [慎用]
https://cdn.jsdelivr.net/gh/Loyalsoldier/surge-rules@release/ruleset/google.txt, tag=🇨🇳GoogleCN, force-policy=direct, update-interval=172800, opt-parser=true, enabled=true

# 代理域名列表
https://cdn.jsdelivr.net/gh/Loyalsoldier/surge-rules@release/ruleset/proxy.txt, tag=🇺🇳Proxy, force-policy=🇺🇳Proxy, update-interval=172800, opt-parser=true, enabled=true

# 直连域名列表
https://cdn.jsdelivr.net/gh/Loyalsoldier/surge-rules@release/ruleset/direct.txt, tag=🔀Direct, force-policy=direct, update-interval=172800, opt-parser=true, enabled=true

# 非中国大陆使用的顶级域名列表
https://cdn.jsdelivr.net/gh/Loyalsoldier/surge-rules@release/ruleset/tld-not-cn.txt, tag=🇺🇳TLD_NOT_CN, force-policy=🇺🇳Proxy, update-interval=172800, opt-parser=true, enabled=false

# GFWList 域名列表
https://cdn.jsdelivr.net/gh/Loyalsoldier/surge-rules@release/ruleset/gfw.txt, tag=🇺🇳GFWList, force-policy=🇺🇳Proxy, update-interval=172800, opt-parser=true, enabled=false

# Greatfire 域名列表
https://cdn.jsdelivr.net/gh/Loyalsoldier/surge-rules@release/ruleset/greatfire.txt, tag=🇺🇳Greatfire, force-policy=🇺🇳Proxy, update-interval=172800, opt-parser=true, enabled=false

# Telegram 使用的 IP 地址列表
https://cdn.jsdelivr.net/gh/Loyalsoldier/surge-rules@release/ruleset/telegramcidr.txt, tag=📨Telegram, force-policy=🇺🇳Proxy, update-interval=172800, opt-parser=true, enabled=true

# 中国大陆 IP 地址列表
https://cdn.jsdelivr.net/gh/Loyalsoldier/surge-rules@release/ruleset/cncidr.txt, tag=🇨🇳China, force-policy=direct, update-interval=172800, opt-parser=true, enabled=true


[rewrite_remote]
# 参数「tag」和「enabled」是可选的。

;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/sample-import-rewrite.snippet, tag=Sample, enabled=true
;https://example.com/rewrite.snippet, tag=Sample, require-devices=ID1, ID2, enabled=true


[server_local]
# 只有 obfs=http, obfs=ws, obfs=ws, obfs=wss 可以有可选的「obfs-uri」字段。
# wss 中的 obfs-host 参数将用于 TLS 握手和 HTTP 头主机字段，如果没有为 wss 设置 obfs-host，则将使用服务器地址。
# 当使用 obfs=ws 和 obfs=wss 时，服务器端可以通过带有 mux=0 的 v2ray-plugin 或 v2ray-core 进行部署。
# 值得注意的是，shadowsocks 的 udp-over-tcp 只有部署了 shadowsocksr python 版本的服务器才支持，其他版本只支持 UDP 中继本身。如果您将 udp-relay 和 udp-over-tcp 用于 shadowsocks，则必须确保您的服务器部署了 shadowsocksr python 版本。
# 值得注意的是，obfs=tls 与 obfs=over-tls 不同。 obfs=tls 是 shadowsocks 项目相关的混淆插件，只是对 TLS 协议的混淆。 obfs=over-tls 是 TLS 协议。 Quantumult X 支持它们两者的 shadowsocks。
# obfs plugin tls1.2 ticket auth 比 tls1.2 ticket fastauth 和 obfs tls 多一个 RTT，你最好使用 tls1.2 ticket fastauth。
# chacha20-ietf-poly1305 和 chacha20-poly1305 在 VMess 配置中具有相同的效果。
# 用于 SSL pinning 的 tls-cert-sha256 或 tls-pubkey-sha256 可以由 openssl 使用以下命令生成：
# openssl x509 -noout -fingerprint -sha256 -inform pem -in your-cert.pem
# openssl x509 -inform pem -pubkey -noout < your-cert.pem | openssl pkey -pubin -outform der | openssl dgst -sha256
# 如果 tls-verification 为 false，则 tls-cert-sha256 和 tls-pubkey-sha256 将被忽略。
# 如果设置了 tls-pubkey-sha256，则 tls-cert-sha256 将被忽略。
# tls13 参数已被弃用（自 v1.0.26 起已弃用），无论您设置什么，始终支持 TLS 版本 1.3。

;shadowsocks=example.com:80, method=chacha20, password=pwd, obfs=http, obfs-host=bing.com, obfs-uri=/resource/file, fast-open=false, udp-relay=false, server_check_url=http://www.apple.com/generate_204, tag=ss-obfs-http-01
;shadowsocks=example.com:80, method=chacha20, password=pwd, obfs=http, obfs-host=bing.com, obfs-uri=/resource/file, fast-open=false, udp-relay=false, tag=ss-obfs-http-02
;shadowsocks=example.com:443, method=chacha20, password=pwd, obfs=tls, obfs-host=bing.com, fast-open=false, udp-relay=false, tag=ss-obfs-tls-01
;shadowsocks=example.com:443, method=chacha20, password=pwd, obfs=over-tls, obfs-host=bing.com, tls-verification=true, tls-cert-sha256=b0088370d6c8e02d6e38c443abf81be2aaf1e18f00435aaf0b39852c338f7aaa, fast-open=false, udp-relay=false, tag=ss-tls-01
;shadowsocks=example.com:443, method=chacha20, password=pwd, obfs=over-tls, obfs-host=bing.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, fast-open=false, udp-relay=false, tag=ss-tls-02
;shadowsocks=example.com:443, method=chacha20, password=pwd, ssr-protocol=auth_chain_b, ssr-protocol-param=def, obfs=tls1.2_ticket_fastauth, obfs-host=bing.com, tag=ssr
;shadowsocks=example.com:80, method=aes-128-gcm, password=pwd, obfs=ws, fast-open=false, udp-relay=false, tag=ss-ws-01
;shadowsocks=example.com:80, method=aes-128-gcm, password=pwd, obfs=ws, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=ss-ws-02
;shadowsocks=example.com:443, method=aes-128-gcm, password=pwd, obfs=wss, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=ss-ws-tls-01
;shadowsocks=example.com:443, method=aes-128-gcm, password=pwd, obfs=wss, obfs-uri=/ws, tls13=true, fast-open=false, udp-relay=false, tag=ss-ws-tls-02
;shadowsocks=example.com:80, method=chacha20, password=pwd, fast-open=false, udp-relay=true, udp-over-tcp=true, tag=ss-udp-over-tcp

# 要禁用 vmess 的 aead 标头，只需设置 aead=false，默认值为 true。如果您的服务器（V2Ray）版本低于 v4.28 请设置 aead=false
;vmess=example.com:80, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, fast-open=false, udp-relay=false, tag=vmess-01
;vmess=example.com:80, method=aes-128-gcm, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, fast-open=false, udp-relay=false, aead=false, tag=vmess-02
;vmess=example.com:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, fast-open=false, udp-relay=false, tag=vmess-tls-01
;vmess=example.com:80, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=http, obfs-host=bing.com, obfs-uri=/resource/file, fast-open=false, udp-relay=false, server_check_url=http://www.apple.com/generate_204, tag=vmess-http
;vmess=192.168.1.1:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, obfs-host=example.com, fast-open=false, udp-relay=false, tag=vmess-tls-02
;vmess=192.168.1.1:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, obfs-host=example.com, tls13=true, fast-open=false, udp-relay=false, tag=vmess-tls-03
;vmess=example.com:80, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=ws, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-01
;vmess=192.168.1.1:80, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=ws, obfs-host=example.com, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-02
;vmess=example.com:443, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-tls-01
;vmess=192.168.1.1:443, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-host=example.com, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-tls-02
;vmess=192.168.1.1:443, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-host=example.com, obfs-uri=/ws, tls13=true, fast-open=false, udp-relay=false, tag=vmess-ws-tls-03

# http 不支持 obfs 字段
;http=example.com:80,fast-open=false, udp-relay=false, tag=http-01
;http=example.com:80, username=name, password=pwd, fast-open=false, udp-relay=false, tag=http-02
;http=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, fast-open=false, udp-relay=false, tag=http-tls-01
;http=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, fast-open=false, udp-relay=false, tag=http-tls-02

;socks5=example.com:80,fast-open=false, udp-relay=false, tag=socks5-01
;socks5=example.com:80, username=name, password=pwd, fast-open=false, udp-relay=false, tag=socks5-02
;socks5=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, fast-open=false, udp-relay=false, tag=socks5-tls-01
;socks5=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, fast-open=false, udp-relay=false, tag=socks5-tls-02

# obfs 字段仅支持 trojan 的 websocket over tls. 在 tls 上使用 websocket 时，您不应再设置 over-tls 和 tls-host 选项，而是设置 obfs=wss 和 obfs-host 选项。
;trojan=example.com:443, password=pwd, over-tls=true, tls-verification=true, fast-open=false, udp-relay=false, tag=trojan-tls-01
;trojan=example.com:443, password=pwd, over-tls=true, tls-verification=true, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-02
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, fast-open=false, udp-relay=false, tag=trojan-tls-03
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-04
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-cert-sha256=b0088370d6c8e02d6e38c443abf81be2aaf1e18f00435aaf0b39852c338f7aaa, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-05
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-06
;trojan=192.168.1.1:443, password=pwd, obfs=wss, obfs-host=example.com, obfs-uri=/path, udp-relay=true, tag=trojan-wss-05

[filter_local]
;user-agent, ?abc*, proxy
;host, www.google.com, proxy
;host-keyword, adsite, reject
;host-suffix, googleapis.com, proxy
;host-suffix, googleapis.com, proxy, force-cellular
;host-suffix, googleapis.com, proxy, multi-interface
;host-suffix, googleapis.com, proxy, multi-interface-balance
;host-suffix, googleapis.com, proxy, via-interface=pdp_ip0
;ip6-cidr, 2001:4860:4860::8888/32, direct
;ip-cidr, 224.0.0.0/24, direct
;geoip, cn, direct, force-cellular
host-suffix, local, direct
ip-cidr, 192.168.0.0/16, direct
ip-cidr, 10.0.0.0/8, direct
ip-cidr, 172.16.0.0/12, direct
ip-cidr, 127.0.0.0/8, direct
ip-cidr, 100.64.0.0/10, direct
ip-cidr, 224.0.0.0/4, direct
ip6-cidr, fe80::/10, direct
geoip, cn, direct
final, proxy


[rewrite_local]
# The "reject" returns HTTP status code 404 with no content. This type of rewrite has some kind of dynamic delay (0~5 seconds) mechanism of response for repeated requests in a short period of time. The less the repetition, the shorter the delay (0). The more the repetition, the greater the delay (5).
# The "reject-200" returns HTTP status code 200 with no content.
# The "reject-img" returns HTTP status code 200 with content of 1px gif.
# The "reject-dict" returns HTTP status code 200 with content of empty json object.
# The "reject-array" returns HTTP status code 200 with content of empty json array.
# The "request-header" works for all the http headers not just one single header, so you can match two or more headers including CRLF in one regular expression.
# The "echo-response" just reply back the body of the content type response for matched URL, the body file should be saved at "On My iPhone - Quantumult X - Data".
# The length and encoding related HTTP header fields will be automatically processed by Quantumult if the "rewrite" is body related, so you should not handle them by yourself. The max supported original response body size is 4 MB(iOS 13+) for script-response-body.
# The body related rewrite will not be executed if the body is empty.
# When using javascript in rewrite, you can use those objects: $request, $response, $notify(title, subtitle, message), console.log(message) and Quantumult's built-in objects all have prefix "$".
# Supports: $request.sessionIndex, $request.scheme, $request.method, $request.url, $request.path, $request.headers,$response.sessionIndex, $response.statusCode, $response.headers, $response.body
# The $request.sessionIndex is equal to $response.sessionIndex when the response is related to the request. The sessionIndex has nothing to do with the index of TCP records in the orange "Activity" panel.
# The $notify(title, subtitle, message) will post iOS notifications if Quantumult notification has been enabled.
# The $prefs is for persistent store: $prefs.valueForKey(key), $prefs.setValueForKey(value, key), $prefs.removeValueForKey(key), $prefs.removeAllValues().
# The console.log(message)  will output logs to Quantumult log file.
# The setTimeout(function() { }, interval) will run function after interval(ms).
# The scripts for script-request-header, script-request-body, script-response-header, script-response-body, script-echo-response and script-analyze-echo-response should be saved in local "On My iPhone - Quantumult X - Scripts" or "iCloud Drive - Quantumult X - Scripts". Samples can be found at https://github.com/crossutility/Quantumult-X
# The difference between script-analyze-echo-response and script-echo-response is that the former will wait for the request body.

;^http://example\.com/resource1/1/ url reject
;^http://example\.com/resource1/2/ url reject-img
;^http://example\.com/resource1/3/ url reject-200
;^http://example\.com/resource1/4/ url reject-dict
;^http://example\.com/resource1/5/ url reject-array
;^http://example\.com/resource2/ url 302 http://example.com/new-resource2/
;^http://example\.com/resource3/ url 307 http://example.com/new-resource3/
;^http://example\.com/resource4/ url request-header ^GET /resource4/ HTTP/1\.1(\r\n) request-header GET /api/ HTTP/1.1$1
;^http://example\.com/resource4/ url request-header (\r\n)User-Agent:.+(\r\n) request-header $1User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36$2
;^http://example\.com/resource5/ url request-body "info":\[.+\],"others" request-body "info":[],"others"
;^http://example\.com/resource5/ url response-body "info":\[.+\],"others" response-body "info":[],"others"
;^http://example\.com/resource5/ url echo-response text/html echo-response index.html
;^http://example\.com/resource6/ url script-response-body response-body.js
;^http://example\.com/resource7/ url script-echo-response script-echo.js
;^http://example\.com/resource8/ url script-response-header response-header.js
;^http://example\.com/resource9/ url script-request-header request-header.js
;^http://example\.com/resource10/ url script-request-body request-body.js


[task_local]
# 如果设置了require-devices，这行配置只会在当前Quantumult设备ID属于require-devices时加载。 Quantumult 设备 ID 可在“设置 -其他设置 -关于”中找到。
# $task.fetch() 组成一个 HTTP 请求并处理响应，只支持 text body。如果您想要 serial requests 而不是 current requests，可以将 $task.fetch() 嵌入到另一个 $task.fetch() 的完成处理程序中。
# 脚本应保存在本地「我的 iPhone - Quantumult X - Scripts」或「iCloud Drive - Quantumult X - Scripts」中。示例：https://github.com/crossutility/Quantumult-X/blob/master/sample-task.js
# 默认的 HTTP 请求超时是 10 秒。
# 支持 5 或 6 个 cron 字段，不包括命令字段。 event-network 将在网络更改时触发。当用户点击 UIAction 时将触发事件交互。只有在 Quantumult X Tunnel 运行时才能触发事件相关任务。

;* * * * * sample-task.js
;* * * * * sample-task2.js, img-url=https://raw.githubusercontent.com/crossutility/Quantumult-X/master/quantumult-x.png, tag=Sample, enabled=true
;* * * * * sample-task3.js, img-url=https://raw.githubusercontent.com/crossutility/Quantumult-X/master/quantumult-x.png, tag=Sample, require-devices=ID1, ID2, enabled=true
;event-network sample-task3.js
;event-interaction sample-task4.js
event-interaction https://cdn.jsdelivr.net/gh/KOP-XIAO/QuantumultX@master/Scripts/streaming-ui-check.js, tag=📺流媒体服务查询, img-url=checkmark.seal.system, enabled=true

[http_backend]
# 部署一个本地 HTTP 服务器，并使用 JavaScript 进行数据处理。
# 如果设置了 require-devices，则仅当当前 Quantumult 设备 ID 属于 require-devices 时才会加载此行配置。 Quantumult 设备 ID 可在“设置 -其他设置 -关于”中找到。
# 输入变量为：$reqeust.url、$reqeust.path、$reqeust.headers、$reqeust.body。
# 使用 $done 输出像 $done({status:"HTTP/1.1 200 OK"}, headers:{}, body:"here is a string") 这样的返回响应。
# 此外，您还可以使用签名或任何其他验证方法来验证请求是否合法。
# 部署后您应该通过 http://127.0.0.1:9999/your-path/your-api/. 进行访问。服务器默认监听端口为 9999，您可以在UI中进行更改。

;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/sample-backend.js, tag=fileConverter, path=^/example/v1/
;preference.js, tag=userPreference, path=^/preference/v1/, img-url=https://example.com, enabled=true
;sample.js, tag=sample, path=^/sample/v1/, require-devices=ID1, ID2, enabled=true
;convert.js, tag=fileConverter, path=^/convert/v1/


[mitm]
# 只有「hostname」中的 TLS SNI 或目标地址将被 MitM 处理。
# 默认情况下，当为 HTTPS 请求启用 MitM 时，Quantumult X 会从原站点获取证书（证书会被缓存），保留大部分需要的原始证书信息，并使用 MitM 的 root CA 重新签名，这是推荐的（也是比较兼容的）MitM 证书创建方式。
# 偶尔有些用户喜欢调试 HTTPS 请求，其域名不存在，所以原证书根本不存在。当参数 simple_cert_hostname 出现的时候。其 TLS SNI 名称在 simple_cert_hostname(及 hostname) 中的 HTTPS 请求将使用纯本地生成的 MitM 证书。
# 注意！！！您应该始终保护您的 CA 密码和 p12 的私密性。

;passphrase =
;p12 =
;skip_validating_cert = false
;force_sni_domain_name = false
;hostname = *.example.com, *.sample.com, non-existed-domain.com, *.non-connected-domain.com
;simple_cert_hostname = non-existed-domain.com, *.non-connected-domain.com
